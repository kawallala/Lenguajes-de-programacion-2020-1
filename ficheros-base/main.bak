#lang play
(require "machine.rkt")
(print-only-errors #f)
;;;;;;;;;;;;;;;;;;;;;;;
;; Language definition
;;;;;;;;;;;;;;;;;;;;;;;

#|
<s-expr> ::= <num>
         | <id>
         | {+ <s-expr> <s-expr>}
         | {- <s-expr> <s-expr>}
         | {with {<s-expr> : <type> <s-expr>} <s-expr>}
         | {fun {<id>  : <s-expr>} [: <type>] <expr>}
         | {<expr> <expr>}

<type> ::= Num
         | {<type> -> <type>}}
|#
(deftype Expr
  (num n)
  (add l r)
  (sub l r)
  (id s)
  (fun id targ body tbody)
  (fun-db body)
  (acc n) ;Se usa para la pregunta 3
  (app fun-id arg-expr))

(deftype Type
  (TNum)
  (TFun arg ret))

#|
1. Funciones de primera clase con tipos declarados
|#

;parse-type: s-expr -> type o error
;parse la gramatica de tipos, en caso de error
;retorna "Parse error""
(define (parse-type s-expr)
  (match s-expr
    ['Num (TNum)]
    [(list a) (parse-type a)]
    [(list a '-> b) (TFun (parse-type a) (parse-type b))]
    [_ (error "Parse error")]))

;parse: s-expr -> Expr
;parsea la gramatica completa del lenguaje
(define (parse s-expr)
  (match s-expr
    [(? number?) (num s-expr)]
    [(? symbol?) (id s-expr)]
    [(list '+ expr1 expr2) (add (parse expr1) (parse expr2))]
    [(list '- expr1 expr2) (sub (parse expr1) (parse expr2))]
    [(list 'with (list i ': t e) b) (app (fun i (parse-type t) (parse b) #f) (parse e))]
    [(list 'fun (list i ': ti) ': tb b) (fun i (parse-type ti) (parse b) (parse tb))]
    [(list 'fun (list i ': ti) b) (fun i (parse-type ti) (parse b) #f)]
    [(list a b) (app (parse a) (parse b))]))

;parse Type -> type
;recibe un tipo y lo regresa en la notacion correcta
(define (prettify type)
  (match type
    [(TNum) 'Num]
    [(TFun a b) (list (prettify a) '-> (prettify b))]))

#|
2. Verificación de Tipos
|#
(define (typeof expr) #f)

(define (typecheck s-expr) #f)

#|
3. Compilación
|#
(define (deBruijn expr) #f)

(define (compile expr) #f)

(define (typed-compile s-expr) #f)
