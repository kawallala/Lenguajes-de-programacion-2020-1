#lang play
(print-only-errors #t)
#|
<btree> ::= (leaf <val>) |
            (node <val> <btree> <btree>)
|#

(deftype BinTree
  (leaf value)
  (node value left right))
; NO PATTERN MATCHING
#|(define (f t)
  (if (leaf? t)
      ...
      ... (f (node-left t))... (f (node-right t)) ...))
|#
; PATTERN MATCHING
#|(define (f t)
  (match t
    [(leaf v) ...]
    [(node v l r)... (f l)... (f r)...]))
|#

; contains? :: BinTree x Val -> Bool
(define (contains? t val)
  (match t
    [(leaf v) (equal? v val)]
    [(node v l r)(or (equal? v val)
                     (contains? l val)
                     (contains? r val))]))
;------------------------------------------
#|
  <expr ::= (num <n>)
          | (add <expr> <expr>)
          | (sub <expr> <expr>)
|#
(deftype Expr
  (num n)
  (add l r)
  (sub l r))


; calc : Expr -> num
(define (calc expr)
  (match expr
    [(num n) n]
    [(add l r) (+ (calc l) (calc r))]
    [(sub l r) (- (calc l) (calc r))]))

(test (calc (add (num 10) (num 20)))
      30)

(test (calc (add (num 10) (sub (num 20) (num 10))))
      20)
; (add (num 10) (num 20)) = 30